@using Draughts.Domain.GameContext.Models;

@model PlayGameViewModel
@{
    if (Model is null) {
        throw new InvalidOperationException("Model not set.");
    }
    ViewBag.Title = "Game " + Model.Id;
    var settings = Model.Settings;
    var board = Model.CurrentGameState.Board;
    var player1 = Model.Players.SingleOrDefault(p => p.Color == settings.FirstMove);
    var player2 = Model.Players.SingleOrDefault(p => p.Color == settings.FirstMove.Other);
    var captureSequenceFrom = Model.CurrentGameState.CaptureSequenceFrom;
    var boardIsRotated = Model.Players.Any(p => p.UserId == ViewBag.UserId)
        ? (player1?.UserId == ViewBag.UserId ? player1 : player2)?.Color == Color.Black
        : false;
}

<div class="text-container">
    <div id="game-container">
        <div id="game-board" class="game-board-@(settings.BoardSize)@(settings.IsHexagonalBoard() ? " hexagonal" : "")">
            @for (int y = 0; y < board.LongSize; y++) {
                @for (int x = 0; x < board.LongSize; x++) {
                    var piece = board.At(x, y, boardIsRotated);
                    var (cssX, cssY) = board.CssCoordinatesFor(x, y);
                    if (piece is null) {
                        <div class="square" style="left: @(cssX)px; top: @(cssY)px;"></div>
                    } else {
                        var squareId = board.SquareIdAt(x, y, boardIsRotated);
                        <div id="square-@squareId"
                            class="square playable @(piece.CssClasses)"
                            style="left: @(cssX)px; top: @(cssY)px;"
                            data-number="@(squareId)"
                            data-gameid="@Model.Id">
                        </div>
                    }
                }
            }
            @for (int i = 0; i < board.LongSize; i++) {
                var (rowSquareId, rowCssX, rowCssY) = board.FirstSquareIdOfRow(i, boardIsRotated);
                <div id="row-@i" class="square row" style="left: @(rowCssX)px; top: @(rowCssY)px">@rowSquareId</div>
                var (colSquareId, colCssX, colCssY) = board.LastSquareIdOfCol(i, boardIsRotated);
                <div id="col-@i" class="square col" style="left: @(colCssX)px; top: @(colCssY)px">@colSquareId</div>
            }
        </div>

        <div id="game-sidebar">
            <h1 id="game-id" data-game-id="@(Model.Id)">@ViewBag.Title</h1>

            <h3>Turn</h3>
            <ul class="p-like">
                @if (player1 is null) {
                    <li>@Utils.PostLink($"Join as {settings.FirstMove}", "/lobby/join",
                        ("gameId", Model.Id.ToString()), ("color", settings.FirstMove.ToString()))</li>
                } else {
                    <li>
                        <span id="turn-player-@(player1.Id)" class="turn-player" @Utils.HideIf(Model.Turn?.Player.Id != player1.Id)>&gt; </span>
                        <span id="nr@(player1.Color)"></span>
                        @player1.Color: @Utils.UserLinkWithRank(player1)
                    </li>
                }
                @if (player2 is null) {
                    <li>@Utils.PostLink($"Join as {settings.FirstMove.Other}", "/lobby/join",
                        ("gameId", Model.Id.ToString()), ("color", settings.FirstMove.Other.ToString()))</li>
                } else {
                    <li>
                        <span id="turn-player-@(player2.Id)" class="turn-player" @Utils.HideIf(Model.Turn?.Player.Id != player2.Id)>&gt; </span>
                        <span id="nr@(player2.Color)"></span>
                        @player2.Color: @Utils.UserLinkWithRank(player2)
                    </li>
                }

                @if (Model.FinishedAt is not null) {
                    <li>
                        Victor: @if (Model.Victor is null) { <span>Draw</span> } else { <span>@Model.Victor.Username</span> }
                    </li>
                } else if (Model.Turn is not null) {
                    <li>Time left: <span id="turn-time-left">88:88:88</span> <span id="turn-time-left-offset"></span></li>
                }
            </ul>

            @if (Model.StartedAt is not null && Model.FinishedAt is null) {
                <h3>Actions</h3>
                <div class="p-like">
                    Actions: @Utils.PostLink("Resign", $"/game/{Model.Id}/resign"),
                    @Utils.PostLink("Vote for a draw", $"/game/{Model.Id}/draw")
                </div>
            }

            <h3>Game settings</h3>
            <ul class="p-like">
                <li>Flying kings: <span>@Utils.YesNo(settings.FlyingKings)</span></li>
                <li>Men capture backwards: <span>@Utils.YesNo(settings.MenCaptureBackwards)</span></li>
                <li>
                    Capture constraints:
                    @if (settings.CaptureConstraints == GameSettings.DraughtsCaptureConstraints.MaximumPieces) {
                        <span>The maximum amount of pieces possible.</span>
                    } else if (settings.CaptureConstraints == GameSettings.DraughtsCaptureConstraints.AnyFinishedSequence) {
                        <span>Any finished sequence of pieces.</span>
                    }
                </li>
            </ul>
        </div>
    </div>
</div>

<div id="captureSequenceFrom" class="hidden" data-val="@captureSequenceFrom"></div>
<div id="turnExpiryTime" class="hidden" data-val="@Utils.DateTimeIso(Model.Turn?.ExpiresAt)"></div>
<div id="currentTime" class="hidden" data-val="@Utils.DateTimeIso(Model.Turn?.CurrentTime)"></div>

@section Scripts {
    <script type="text/javascript" nonce="@(Model.Nonce)">
        DraughtsApp.initializePlayGame();
    </script>
}
