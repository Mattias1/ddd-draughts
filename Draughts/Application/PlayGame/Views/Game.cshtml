@using Draughts.Domain.GameContext.Models;

@model PlayGameViewModel
@{
    ViewBag.Title = "Game " + Model.Id;
    var settings = Model.Settings;
    var board = Model.CurrentGameState.Board;
    var player1 = Model.Players.SingleOrDefault(p => p.Color == settings.FirstMove);
    var player2 = Model.Players.SingleOrDefault(p => p.Color == settings.FirstMove.Other);
    var captureSequenceFrom = Model.CurrentGameState.CaptureSequenceFrom;
}

<div class="text-container">
    <div id="game-container">
        <div id="game-board" class="game-board-@(settings.BoardSize)">
            @for (int y = 0; y < settings.BoardSize; y++) {
                @for (int x = 0; x < settings.BoardSize; x++) {
                    var square = board[x, y];
                    if (square is null) {
                        <div class="square" style="left: @(60 * x)px; top: @(60 * y)px;"></div>
                    }
                    else {
                        <div id="square-@square.Id"
                            class="square playable @(square.Color)@(square.IsMan ? " man" : "")@(square.IsKing ? " king" : "")"
                            style="left: @(60 * x)px; top: @(60 * y)px;"
                            data-number="@(square.Id)"
                            data-gameid="@Model.Id">
                        </div>
                    }
                }
            }
            @for (int i = 0; i < settings.BoardSize; i++) {
                <div id="row-@i" class="square row" style="left: -60px; top: @(60 * i)px">@(settings.BoardSize - i)</div>
                <div id="col-@i" class="square col" style="left: @(60 * i)px; top: @(60 * settings.BoardSize)px">@((char)('a' + i))</div>
            }
        </div>

        <div id="game-sidebar">
            <h1 id="game-id" data-game-id="@(Model.Id)">@ViewBag.Title</h1>

            <h3>Players</h3>
            <ul class="p-like">
                @if (player1 is null) {
                    <li>@Utils.PostLink($"Join as {settings.FirstMove}", "/lobby/join",
                        ("gameId", Model.Id.ToString()), ("color", settings.FirstMove.ToString()))</li>
                }
                else {
                    <li>
                        <span id="turn-player-@(player1.Id)" class="turn-player" @Utils.HideIf(Model.Turn?.Player.Id != player1.Id)>&gt; </span>
                        <span id="nr@(player1.Color)"></span>
                        @player1.Color: @Utils.UserLinkWithRank(player1)
                    </li>
                }
                @if (player2 is null) {
                    <li>@Utils.PostLink($"Join as {settings.FirstMove.Other}", "/lobby/join",
                        ("gameId", Model.Id.ToString()), ("color", settings.FirstMove.Other.ToString()))</li>
                }
                else {
                    <li>
                        <span id="turn-player-@(player2.Id)" class="turn-player" @Utils.HideIf(Model.Turn?.Player.Id != player2.Id)>&gt; </span>
                        <span id="nr@(player2.Color)"></span>
                        @player2.Color: @Utils.UserLinkWithRank(player2)
                    </li>
                }

                @if (Model.FinishedAt is not null) {
                    <li>
                        Victor: @if (Model.Victor is null) { <span>Draw</span> } else { <span>@Model.Victor.Username</span> }
                    </li>
                }
            </ul>

            @if (Model.StartedAt is not null && Model.FinishedAt is null) {
                <h3>Actions</h3>
                <div class="p-like">
                    Actions: @Utils.PostLink($"Resign", $"/game/{Model.Id}/resign"),
                    @Utils.PostLink($"Vote for a draw", $"/game/{Model.Id}/draw")
                </div>
            }

            <h3>Game settings</h3>
            <ul class="p-like">
                <li>Flying kings: <span>@Utils.YesNo(settings.FlyingKings)</span></li>
                <li>Men capture backwards: <span>@Utils.YesNo(settings.MenCaptureBackwards)</span></li>
                <li>
                    Capture constraints:
                    @if (settings.CaptureConstraints == GameSettings.DraughtsCaptureConstraints.MaximumPieces) {
                        <span>The maximum amount of pieces possible.</span>
                    }
                    else if (settings.CaptureConstraints == GameSettings.DraughtsCaptureConstraints.AnyFinishedSequence) {
                        <span>Any finished sequence of pieces.</span>
                    }
                </li>
            </ul>
        </div>
    </div>
</div>

<div id="captureSequenceFrom" class="hidden" data-val="@captureSequenceFrom"></div>
