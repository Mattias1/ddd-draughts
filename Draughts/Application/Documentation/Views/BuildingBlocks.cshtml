@{
    ViewBag.Title = "Documentation";
}

<nav class="side-menu">
    @Utils.SideMenu(Model)
</nav>

<div class="text-side-menu-container">
    <h1>@ViewBag.Title</h1>
    <p>
        Domain-driven design uses several building blocks to create your application or domain. Although not all of your
        classes have to be one of these, most of them probably will.
    </p>

    <h4>Entities</h4>
    <p>
        Domain objects that change over time. These have an ID and will usually be mutable classes.
    </p>

    <h4>Value objects</h4>
    <p>
        Domain objects that are defined by their attributes. They are immutable.
    </p>

    <h4>Domain events</h4>
    <p>
        Things that have happened in the domain. Past tense. These can be broadcasted to other applications or domains.
    </p>

    <h4>Domain services and application services</h4>
    <p>
        Domain services are used for logic that spans multiple aggregates. Application services don't contain any domain
        logic at all. They do your transaction management and coordinate between bounded contexts if that's necessary.
    </p>

    <h4>Factories</h4>
    <p>
        Factories are responsible for creating domain objects, usually aggregates. Currently I'm using my factories
        wrong, as they do too much work ;)
    </p>

    <h4>Repositories</h4>
    <p>
        A repository is reseponsible for all communication with your database (or whatever you use to store data).
        Usually there's one repository per aggregate. Yes, I'm doing this wrong as well currenlty ;)
    </p>
</div>
