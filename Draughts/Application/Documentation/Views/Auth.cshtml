@{
    ViewBag.Title = "Documentation";

    var refs = new ReferenceTooltips();
}

<nav class="side-menu">
    @Utils.SideMenu(Model)
</nav>

<div class="text-side-menu-container">
    <h1>@ViewBag.Title</h1>

    <h3>Authentication and authorization</h3>
    <p>
        Although not strictly a part of DDD, I implemented the whole authentication and authorization myself, partly
        because it's fun and partly because that's the best way to learn how things work.
    </p>
    <p>
        Because I wanted to experiment with a stateless webapplication, I used a JSON Web Token
        (JWT)&nbsp;@refs.Print("Visit <a class=\"extern\" href=\"https://jwt.io\">jwt.io</a> for more information on "
            + "the JWT standard.") for authentication and authorization.
        Note that JWTs are not meant to be long lived, so this is not a sound idea and I would do this
        <a @Utils.Href("/documentation/differentnexttime")>differently next time</a>.
    </p>

    <h4>The JWT action filter</h4>
    <p>
        Before entering a controller, a request goes through the JwtActionFilter. There the token, if present, is parsed
        and validated.
    </p>
    <p>
        The action that belongs to that request has either a Requires attribute or a GuestRoute attribute. If there's a
        Requires attribute the permissions of the user will be checked against the required permissions. For a guest
        route no check is necessary of course.
    </p>
    <p>
        The information from the JWT is stored in an AuthContext object, containing the users information. This is
        attached to the HttpContext. After de filter is done with its authorization, the AuthContextActionFilter is used
        to pass the AuthContext information back to the Controller and the View.
    </p>

    <h4>Using a cookie</h4>
    <p>
        The JWT is passed via a cookie. The reason for that is because our frontend doesn't rely on javascript or ajax
        to communicate with the backend, but uses mostly just simple html links and form posts. With a cookie it's way
        easier to attach the token to every request.
    </p>

    <h4>Final note</h4>
    <p>
        Even if you want to use this idea, all of this is handcrafted and should not be used in production code. Please
        use properly audited libraries for security related matters :).
    </p>
</div>
