@model MenuViewModel
@{
    if (Model is null) {
        throw new InvalidOperationException("Model not set.");
    }
    ViewBag.Title = "Documentation";
}

<nav class="side-menu">
    @Utils.SideMenu(Model)
</nav>

<div class="text-side-menu-container">
    <h1>@ViewBag.Title</h1>

    <h3>Domain-driven design</h3>
    <p>
        There's a lot you can say about Domain-driven design (DDD). It is a concept in which the structure of the code,
        the team, the processes and even how we speak are focussed on the business domain (and not, for example, on
        the database structure, specific features or the structure of the organisation).
        This application focusses on the software architecture part, and largely ignores the rest.
    </p>
    <p>
        The term Domain-driven design was coined by Erik Evans in
        <a class="extern" href="https://dddcommunity.org/book/evans_2003/">his book</a> (2003).
        <!-- TODO: Find a better way to place this. Maybe after I've read the book above these paragraphs can be merged? -->
        I should probably add a note of thanks to Vladimir Khorikov
        (<a class="extern" href="https://enterprisecraftsmanship.com/">Enterprise Craftsmanship</a>) for his insightful
        blogposts.
    </p>

    <h2>Design choices</h2>

    <h4>Bounded contexts and aggregates</h4>
    <p>
        Bounded contexts and aggregates are DDD concepts that mark explicit boundaries between parts of the application,
        and allow you to achieve tight cohesion and loose coupling on an architectural level.
        For Draughts, we have three bounded contexts: Game, User and Auth, each having one or more aggregates.
        <a @Utils.Href("/documentation/boundedcontexts")>Read more</a>.
    </p>

    <h4>Hexagonal architecture</h4>
    <p>
        How to separate the domain logic from the application logic.
        <a @Utils.Href("/documentation/hexagonalarchitecture")>Read more</a>.
    </p>

    <h4>Eventual consistency</h4>
    <p>
        How to handle asynchronuous event based communication with the guarantee to never lose an event.
        <a @Utils.Href("/documentation/eventualconsistency")>Read more</a>.
    </p>

    <h4>Other topics</h4>
    <p>
        There are many other topics that are relevant to DDD or this application.
        You can read about some <a @Utils.Href("/documentation/designprinciples")>design principles</a> I think are
        important, or about the <a @Utils.Href("/documentation/buildingblocks")>building blocks</a> used to
        implement DDD.
        You can read about some <a @Utils.Href("/documentation/goodtoknow")>issues I ran into</a> and how I solved them,
        what I would do <a @Utils.Href("/documentation/differentnexttime")>differently next time</a> or how and why I
        implemented the <a @Utils.Href("/documentation/auth")>authentication</a>.
    </p>
</div>
