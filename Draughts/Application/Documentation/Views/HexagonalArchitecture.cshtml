@{
    ViewBag.Title = "Documentation";

    var refs = new ReferenceTooltips();
}

<nav class="side-menu">
    @Utils.SideMenu(Model)
</nav>

<div class="text-side-menu-container">
    <h1>@ViewBag.Title</h1>

    <h3>Hexagonal architecture</h3>
    <p>
        This pattern is also known as <em>Ports and Adapters</em>, or <em>Onion architecture</em>. While the latter
        would be the most accurate (the separation between the layers is what matters, not the 6 sides), it's usually
        drawn with hexagons and so the name stuck.
    </p>
    <p>
        <img @Utils.Src("/img/hexagonal-architecture.svg")
            alt="The layers and elements of the hexagonal architecture."
            width="400px">
    </p>
    <p>
        The purpose of the hexagonal architecture in contrast with, say, a simple layered architecture, is to separate
        the domain logic from the application logic.<br>
        As you do not want to be coupling things like HTTP requests, database queries and domain model modifications
        together, you'll need a way to divide them.
    </p>
    <p>
        To achieve this separation, an object is only allowed to interact with objects in the same layer or deeper.
        It's never allowed to interact with layers further to the outside.<br>
        You'll put most of the domain logic inside the <em>domain model</em>, while the <em>domain services</em> are
        responsible for the bits of logic that span multiple aggregates.
        The <em>controllers</em> manage you HTTP requests and the <em>repositories</em>
        @refs.Print("Sometimes people put repository interfaces inside the domain service layer (though never the "
            + "implementations).<br><br>In my opinion this is cheating, as there's no point in pretending that "
            + "interacting with an interface will really not perform any actual object storage logic.")
        your queries of course. That leaves the <em>application services</em> to tie everything together.<br>
        If you have logic that spans multiple bounded contexts, you'll usually want the communication to go via events
        and that's where you'll need <em>event handlers</em>. They function a bit like a controllers, but react to
        events instead of HTTP requests.
    </p>
</div>
