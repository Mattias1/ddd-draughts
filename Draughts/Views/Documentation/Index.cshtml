@model MenuViewModel
@{
    ViewBag.Title = "Documentation";
}

<nav class="side-menu">
    @Utils.SideMenu(Model)
</nav>

<div class="text-side-menu-container">
    <h1>@ViewBag.Title</h1>

    <h3>Domain driven design</h3>
    <p>
        There's a lot you can say about Domain driven design (DDD). It is a concept in which the structure of the code,
        the team and the processes are focussed on the business domain (and not, for example, on features or on the
        database).
    </p>
    <p>
        The term was coined by Erik Evans in <a class="extern" href="https://dddcommunity.org/book/evans_2003/">
        his book</a> (2003).
    </p>
    <p>
        This application focusses on the software architecture part, and largely ignores the rest.
    </p>
    <p>
        <!-- TODO: Find a better way to place this. Maybe after I've read the book above these paragraphs can be merged? -->
        I should probably add a note of thanks to Vladimir Khorikov
        (<a class="extern" href="https://enterprisecraftsmanship.com/">Enterprise Craftsmanship</a>) for his insightful
        blogposts.
    </p>

    <h2>Design choices</h2>

    <h3>Authentication and authorization</h3>
    <p>
        I implemented the whole authentication and authorization myself, partly because it's fun and partly because
        that's the best way to learn how it works. Of course, do not use any of that in an actual production environment
	please.
        <a href="/documentation/auth">Read more</a>.
    </p>

    <h3>Bounded contexts</h3>
    <p>
        A bounded context is an important concept in DDD. It marks explicit boundaries between models, and allows you to
        achieve tight cohesion and loose coupling on an architectural level.
        For Draughts, we have three bounded contexts: Game, User and AuthUser.
        <a href="/documentation/boundedcontexts">Read more</a>.
    </p>
</div>
